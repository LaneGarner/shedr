[{"/Users/lanegarner/Documents/Dev/shedr/src/index.js":"1","/Users/lanegarner/Documents/Dev/shedr/src/App.js":"2","/Users/lanegarner/Documents/Dev/shedr/src/firebase.js":"3","/Users/lanegarner/Documents/Dev/shedr/src/Router.js":"4","/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeTimer.js":"5","/Users/lanegarner/Documents/Dev/shedr/src/components/Header.js":"6","/Users/lanegarner/Documents/Dev/shedr/src/components/Footer.js":"7","/Users/lanegarner/Documents/Dev/shedr/src/components/Fork.js":"8","/Users/lanegarner/Documents/Dev/shedr/src/components/User.js":"9","/Users/lanegarner/Documents/Dev/shedr/src/components/Home.js":"10","/Users/lanegarner/Documents/Dev/shedr/src/components/Record.js":"11","/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeLog.js":"12","/Users/lanegarner/Documents/Dev/shedr/src/components/NewSessionForm.js":"13","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/index.js":"14","/Users/lanegarner/Documents/Dev/shedr/src/components/VegBurg.js":"15","/Users/lanegarner/Documents/Dev/shedr/src/icons/UserIcon.js":"16","/Users/lanegarner/Documents/Dev/shedr/src/icons/RecordIcon.js":"17","/Users/lanegarner/Documents/Dev/shedr/src/icons/VegBurgIcon.js":"18","/Users/lanegarner/Documents/Dev/shedr/src/icons/MetDroneIcon.js":"19","/Users/lanegarner/Documents/Dev/shedr/src/icons/HomeIcon.js":"20","/Users/lanegarner/Documents/Dev/shedr/src/icons/ForkIcon.js":"21","/Users/lanegarner/Documents/Dev/shedr/src/components/Login.js":"22","/Users/lanegarner/Documents/Dev/shedr/src/icons/Logo.js":"23","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/MetDrone.js":"24","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Drone.js":"25","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Metronome.js":"26","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Accent.js":"27","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/TimeSigSelect.js":"28"},{"size":296,"mtime":1612306784026,"results":"29","hashOfConfig":"30"},{"size":5590,"mtime":1612928859968,"results":"31","hashOfConfig":"30"},{"size":1007,"mtime":1612910369184,"results":"32","hashOfConfig":"30"},{"size":4808,"mtime":1612921640041,"results":"33","hashOfConfig":"30"},{"size":8415,"mtime":1612720735518,"results":"34","hashOfConfig":"30"},{"size":1144,"mtime":1612932160086,"results":"35","hashOfConfig":"30"},{"size":1389,"mtime":1612804068685,"results":"36","hashOfConfig":"30"},{"size":538,"mtime":1612804216849,"results":"37","hashOfConfig":"30"},{"size":949,"mtime":1612851725645,"results":"38","hashOfConfig":"30"},{"size":1539,"mtime":1612804193211,"results":"39","hashOfConfig":"30"},{"size":591,"mtime":1612804233253,"results":"40","hashOfConfig":"30"},{"size":1905,"mtime":1612917152474,"results":"41","hashOfConfig":"30"},{"size":6896,"mtime":1612898593103,"results":"42","hashOfConfig":"30"},{"size":61,"mtime":1612297958360,"results":"43","hashOfConfig":"30"},{"size":2602,"mtime":1612930982626,"results":"44","hashOfConfig":"30"},{"size":873,"mtime":1612799339284,"results":"45","hashOfConfig":"30"},{"size":925,"mtime":1612799702720,"results":"46","hashOfConfig":"30"},{"size":579,"mtime":1612286994566,"results":"47","hashOfConfig":"30"},{"size":1173,"mtime":1612799776835,"results":"48","hashOfConfig":"30"},{"size":658,"mtime":1612801131282,"results":"49","hashOfConfig":"30"},{"size":889,"mtime":1612799680026,"results":"50","hashOfConfig":"30"},{"size":665,"mtime":1612906080027,"results":"51","hashOfConfig":"30"},{"size":4489,"mtime":1612291900477,"results":"52","hashOfConfig":"30"},{"size":1866,"mtime":1612804327786,"results":"53","hashOfConfig":"30"},{"size":3147,"mtime":1612504727972,"results":"54","hashOfConfig":"30"},{"size":3953,"mtime":1612506128011,"results":"55","hashOfConfig":"30"},{"size":250,"mtime":1611363999277,"results":"56","hashOfConfig":"30"},{"size":475,"mtime":1612384701819,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hgxmb7",{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"69"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"69"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"69"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"/Users/lanegarner/Documents/Dev/shedr/src/index.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/App.js",["123","124","125","126"],"/Users/lanegarner/Documents/Dev/shedr/src/firebase.js",["127"],"/Users/lanegarner/Documents/Dev/shedr/src/Router.js",["128"],"/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeTimer.js",["129","130","131","132","133","134"],"import React, { useState, useRef } from 'react'\nimport \"./PracticeTimer.css\";\n\nexport const PracticeTimer = ({ practiceTime, setPracticeTime, timerStarted, setTimerStart, timerRunning, setTimerRunning, timerPaused, setTimerPaused, tInterval, setTInterval, timer, setTimer, differenceState, setDifferenceState }) => {\n    // const [timerStarted, setTimerStart] = useState(false)\n    // const [timerRunning, setTimerRunning] = useState(false)\n    // const [timerPaused, setTimerPaused] = useState(false)\n    // const [tInterval, setTInterval] = useState()\n    // const [timer, setTimer] = useState(\"00:00:00\")\n    // const [differenceState, setDifferenceState] = useState()\n    \n    \n    let startTime\n    \n    const test = () => {\n        // const actualTime = getTime();\n        // console.log(actualTime)\n    }\n    \n    const start = () => {\n        {!timerStarted && setTimerStart(true)}\n        startTime = new Date().getTime()\n\n        setTInterval(setInterval(getTime, 1000))\n        setTimerRunning(true);\n        setTimerPaused(false);\n\n\n        //set start date\n    }\n    \n    const getTime = () => {\n        let difference;\n        const updatedTime = new Date().getTime();\n            if (differenceState){\n                difference = (updatedTime - startTime) + differenceState\n                setDifferenceState(difference)\n            } else {\n                difference = (updatedTime - startTime)\n                setDifferenceState(difference)\n            }\n\n            let hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            let minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n            let seconds = Math.floor((difference % (1000 * 60)) / 1000);\n            \n            hours = (hours < 10) ? `0${hours}` : hours;\n            minutes = (minutes < 10) ? `0${minutes}` : minutes;\n            seconds = (seconds < 10) ? `0${seconds}` : seconds;\n\n            setTimer(`${hours}:${minutes}:${seconds}`)\n    }\n\n    const pause = () => {\n            if (!timerPaused) {\n                setTimerRunning(false)\n                setTimerPaused(true)\n                clearInterval(tInterval)\n            } else {\n                setTimerPaused(!timerPaused)\n                start()\n            }\n    }\n\n    const stop = () => {\n        {!timerPaused && pause()}\n        const hrs = timer.slice(0,2)\n        const min = timer.slice(3,5)\n        const sec = timer.slice(6,8)\n        const pTime= [hrs, min, sec]\n        console.log([hrs, min, sec])\n        setPracticeTime(pTime)\n        \n        // pause()\n        setTimerStart(false)\n        // setTimerRunning(false)\n        setTimer(\"00:00:00\")\n        setTimerPaused(false)\n        setDifferenceState(null)\n        // setTimerPaused()\n        // {timerPaused && setTimerPaused(!timerPaused)}\n\n\n        // window.confirm('Are you sure? This will end your session and add current practice time to your log')\n        // reset()\n    }\n\n    const reset = () => {\n        setTimerStart(false)\n        setTimerRunning(false)\n\n\n\n\n    //     clearInterval(tInterval);\n    // savedTime = 0;\n    // difference = 0;\n    // paused = 0;\n    // running = 0;\n    }\n\n//     const getShowTime = () => {\n//         updatedTime = new Date().getTime();\n\n//         // if (savedTime){\n//         //   difference = (updatedTime - startTime) + savedTime;\n//         // } else {\n//         //   difference =  updatedTime - startTime;\n//         // }\n//         let hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n//         let minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n//         let seconds = Math.floor((difference % (1000 * 60)) / 1000);\n        \n//         hours = (hours < 10) ? `0${hours}` : hours;\n//         minutes = (minutes < 10) ? `0${minutes}` : minutes;\n//         seconds = (seconds < 10) ? `0${seconds}` : seconds;\n\n//         setTimer(`${hours}:${minutes}:${seconds}`)\n// }\n\n\n    return (\n                <>\n                    <div className=\"timerDisplay\">\n                        {timer}\n                    {/* <Timer.Hours />:<Timer.Minutes />:<Timer.Seconds />  */}\n                    </div>\n                    \n                    {/* <div>{timerState}</div> */}\n                    <br />\n                    <div>\n                        {timerStarted ? <><button className=\"timerBtn stopBtn\" onClick={stop}>Stop</button><br/></> : <><button className=\"timerBtn startBtn\" onClick={start}>Start</button><br /></>}\n                        \n                        {timerRunning && <><button className=\"timerBtn pauseBtn\" onClick={pause}>Pause</button><br /></>}\n                        {/* <button onClick={start}>Start</button> */}\n                        {/* <button onClick={pause}>Pause</button> */}\n                        {timerPaused && <><button className=\"timerBtn pauseBtn\" onClick={pause}>Resume</button><br /></>}\n                        \n                        {/* <button onClick={()=>test(getTime)}>Test</button> */}\n                        {/* {timerStarted && <button className=\"timerBtn resetBtn\" onClick={reset}>Reset</button>} */}\n                        \n                    </div>\n                </>\n            )\n\n\n\n\n        // <Timer\n        //     formatValue={(value) => `${(value < 10 ? `0${value}` : value)}`}\n        //     // initialTime={55000}\n        //     startImmediately={false}\n        //     onStart={handleStart}\n        //     onResume={handlePause}\n        //     onPause={handlePause}\n        //     // onChange={()=>setTimer(`${<Timer.Hours />}:${<Timer.Minutes />}:${<Timer.Seconds />}`)}\n        //     // onStop={handleStop}\n        //     onReset={handleStop}\n\n        //     checkpoints={[\n        //         {\n        //             time: 2000,\n        //             callback: () => console.log('Checkpoint A'),\n        //         },\n        //         {\n        //             time: 60000 * 60 * 48 - 5000,\n        //             callback: () => console.log('Checkpoint B'),\n        //         }\n        //     ]}\n\n        // >\n        //     {({ start, resume, pause, stop, reset, getTime, timerState, getTimerState }) => (\n        //         <>\n        //             <div className=\"timerDisplay\" ref={inputEl}>\n        //             <Timer.Hours />:<Timer.Minutes />:<Timer.Seconds /> \n        //             </div>\n                    \n        //             {/* <div>{timerState}</div> */}\n        //             <br />\n        //             <div>\n        //                 {timerStarted ? <><button className=\"timerBtn stopBtn\" onClick={() => {\n        //                     window.confirm('Are you sure? This will end your session and add current practice time to your log')\n        //                         {timerPaused && setTimerPaused(!timerPaused)}\n        //                         // setPracticeTime(Timer)\n        //                         // console.log(inputEl.current.slice(0, 4))\n        //                         handleStop()\n        //                         stop()\n        //                         reset()\n                            \n        //                     // if(window.confirm('Are you sure? This will end your session add current practice time to your log')) {\n        //                     //     {timerPaused && setTimerPaused(!timerPaused)}\n        //                     //     handleStop()\n        //                     //     stop()\n        //                     //     reset()\n        //                     // }\n        //                 }}>Stop</button><br/></> : <><button className=\"timerBtn startBtn\" onClick={start}>Start</button><br /></>}\n                        \n        //                 {timerRunning && <><button className=\"timerBtn pauseBtn\" onClick={pause}>Pause</button><br /></>}\n        //                 {/* <button onClick={start}>Start</button> */}\n        //                 {/* <button onClick={pause}>Pause</button> */}\n        //                 {timerPaused && <><button className=\"timerBtn pauseBtn\" onClick={resume}>Resume</button><br /></>}\n                        \n        //                 <button onClick={()=>test(getTime)}>Test</button>\n        //                 {/* {timerStarted && <button className=\"timerBtn resetBtn\" onClick={reset}>Reset</button>} */}\n                        \n        //             </div>\n        //         </>\n        //     )}\n        // </Timer>\n\n    // )\n}\n",["135","136"],"/Users/lanegarner/Documents/Dev/shedr/src/components/Header.js",["137","138","139"],"/Users/lanegarner/Documents/Dev/shedr/src/components/Footer.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/Fork.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/User.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/Home.js",["140"],"import { useEffect } from \"react\";\nimport { NavLink } from 'react-router-dom'\nimport { Logo } from \"../icons/Logo\";\n\n\nexport const Home = ({ setActivePage, activeSession, setActiveSession }) => {\n    \n    // useEffect(() => {\n    //     setActivePage(\"home\")\n    // }, [])\n\n    const startSession = () => {\n        console.log('start')\n        setActiveSession(true)\n    }\n    \n\n    const styles = {\n        homeContainer: {\n            paddingTop: \"8em\",\n            paddingBottom: \"8em\",\n            backgroundColor: \"#333\",\n            // height: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n        },\n        button: {\n            margin: \"2em\",\n            backgroundColor: \"orange\",\n            border: \"none\",\n            borderRadius: \"2em\",\n            padding: \"1.5em\",\n            cursor: \"pointer\",\n            textDecoration: \"none\",\n            color: \"#333\",\n        },\n        homeSubtitle: {\n            color: \"white\",\n            marginBottom: 0,\n            fontWeight: 100,\n\n        }\n    };\n    return (\n        <div style={styles.homeContainer}>\n            <Logo height=\"20em\"/>\n            <h2 style={styles.homeSubtitle}>Musician's practice toolkit</h2>\n            {activeSession ? \n            <NavLink onClick={startSession}  to=\"/form\" style={styles.button}> Current practice session</NavLink> :\n            <NavLink onClick={startSession}  to=\"/form\" style={styles.button}> New practice session</NavLink>\n            }\n        </div>\n    )\n}\n\n","/Users/lanegarner/Documents/Dev/shedr/src/components/Record.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeLog.js",["141","142","143"],"import React, { useEffect} from 'react'\nimport firebase from 'firebase'\nimport \"./PracticeLog.css\";\nimport dummyData from \"../dummyData.json\";\n\nexport const PracticeLog = ({ user, removeLog, setLogs, logs, newLog}) => {\n    \n    //get relevant data from db\n    useEffect(() => {\n        if(user) {        \n        const logsRef = firebase.database().ref('logs/' + user.uid);\n        // const currentId = user.uid\n        // console.log(user.uid)\n        logsRef.on('value', (snapshot) => {\n            let logs = snapshot.val();\n            let newState = [];\n            for (let log in logs) {\n              // if(log.userId === currentId) {\n                newState.push({\n                    id: log,\n                    practiceTime: logs[log].practiceTime,\n                    practiceTopicNotes: logs[log].practiceTopicNotes,\n                    userId: logs[log].userId,\n                    });\n                // }\n                }\n                setLogs(newState)\n                \n            });\n        }\n\n            }, [user])\n\n\n    console.log(user)\n    let userLogs; \n    // {logs ? userLogs = logs.filter((log) => log.userId === user.uid) : userLogs = null}\n\n    return (\n        <div className=\"logContainer\">\n            <h1>Practice log</h1>\n            \n            {logs.map((log) => (\n                <div className=\"log-card\">\n                    <h3>Topic:</h3>\n                    <span>{log.practiceTopicNotes.topic}</span>\n                    <h3>Notes:</h3>\n                    <span>{log.practiceTopicNotes.notes}</span>\n                    <h3>Practice time:</h3>\n                    <span>\n                        <span>{log.practiceTime[0]}:{log.practiceTime[1]}:{log.practiceTime[2]}</span>\n                    </span><br />\n                    <button onClick={() => removeLog(log.id)}>Remove Item</button>\n                </div>\n            ))}\n        </div>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/NewSessionForm.js",["144","145","146","147"],"import React, { useState, useEffect, useRef } from 'react'\nimport { PracticeTimer } from \"./PracticeTimer\";\nimport DatePicker from \"react-datepicker\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./NewSessionForm.css\"\n\n// const {useRef} = React;\n\nexport const NewSessionForm = ({ user, firebase, setActivePage, newLog, setNewLog, practiceTopicNotes, setPracticeTopicNotes, practiceTime, setPracticeTime, timerStarted, setTimerStart, timerRunning, setTimerRunning, timerPaused, setTimerPaused, tInterval, setTInterval, timer, setTimer, differenceState, setDifferenceState, startDate, setStartDate, activeSession, setActiveSession}) => {\n\n    setActivePage(\"home\")\n\n    let userId;\n    {user ? userId = user.uid: userId = null}\n    \n    console.log(user)\n\n    // handleSubmit(e) {\n    //     e.preventDefault();\n    //     const itemsRef = firebase.database().ref('items');\n    //     const item = {\n    //       title: this.state.currentItem,\n    //       user: this.state.username\n    //     }\n    //     itemsRef.push(item);\n    //     this.setState({\n    //       currentItem: '',\n    //       username: ''\n    //     });\n    //   }\n\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        // alert('submit')\n\n        //if timer is running or paused stop it to submit pr time\n        const itemsRef = firebase.database().ref('logs/' + userId);\n        const makeLog = {userId, practiceTopicNotes, startDate, practiceTime }\n        console.log(makeLog)\n        itemsRef.push(makeLog);\n        // setNewLog(makeLog)\n        cancelForm()\n\n        // console.log(makeLog)\n\n        // setTotal()\n    }\n\n    const cancelForm = () => { \n        setActiveSession(false)\n        setStartDate(new Date())\n        setPracticeTime({hrs: \"00\", min: \"00\", sec: \"00\"})\n        setPracticeTopicNotes({topic: \"\", notes: \"\"})\n        // document.getElementById(\"practice-log-form\").reset();\n    }\n\n    const handleCancel = () => {\n        console.log('cancel')\n        setActiveSession(false)\n    }\n\n    const setHrs = (e) => {\n        const hours = e.target.value\n        const minutes = practiceTime[1]\n        const seconds = practiceTime[2]\n        const newPracticeTime = {hours: {hours}, minutes: {minutes}, seconds: {seconds}}\n        setPracticeTime(newPracticeTime)\n    }\n\n    const setMin = (e) => {\n        const hours = practiceTime[0]\n        const minutes = e.target.value\n        const seconds = practiceTime[2]\n        const newPracticeTime = {hours: {hours}, minutes: {minutes}, seconds: seconds}\n        setPracticeTime(newPracticeTime)\n    }\n\n    const setSec = (e) => {\n        const hours = practiceTime[0]\n        const minutes = practiceTime[2]\n        const seconds = e.target.value\n        const newPracticeTime = [hours, minutes, seconds]\n        setPracticeTime(newPracticeTime)\n    }\n\n    const setTopic = (e) => {\n        const prTopic = e.target.value\n        const prNotes = practiceTopicNotes.notes\n        const newTopicNotes = {topic: prTopic, notes: prNotes}\n        setPracticeTopicNotes(newTopicNotes)\n    }\n\n    const setNotes = (e) => {\n        const prTopic = practiceTopicNotes.topic\n        const prNotes = e.target.value\n        const newTopicNotes = {topic: prTopic, notes: prNotes}\n        setPracticeTopicNotes(newTopicNotes)\n    }\n    \n    \n    return (\n        <div className=\"formContainer\">\n            <div className=\"newSessionContainer\">\n                <h1>Practice Timer</h1>\n                <hr />\n                <PracticeTimer practiceTime={practiceTime} setPracticeTime={setPracticeTime} timerStarted={timerStarted} setTimerStart={setTimerStart} timerRunning={timerRunning} setTimerRunning={setTimerRunning} timerPaused={timerPaused} setTimerPaused={setTimerPaused} tInterval={tInterval} setTInterval={setTInterval} timer={timer} setTimer={setTimer} differenceState={differenceState} setDifferenceState={setDifferenceState} />   \n            </div>\n\n            <div className=\"newSessionContainer\">\n            <form className=\"prForm\" onSubmit={handleSubmit} >\n            <h1>Practice Log</h1>\n            <h2>Session</h2>\n                <hr />\n                <div className=\"start-time-input\">\n                    <h4>Start time:</h4>\n                    <DatePicker\n                        className=\"datepicker\"\n                        selected={startDate}\n                        onChange={date => setStartDate(date)}\n                        showTimeSelect\n                        timeIntervals={1}\n                        dateFormat=\"Pp\"\n                    /> <br />\n                </div>\n                <div className=\"pr-time-input\">\n                    <h4>Total practice time:</h4>\n                    <input value={practiceTime[0]} onChange={setHrs} type=\"number\" id=\"hrs\" name=\"hrs\" min=\"0\" max=\"99\"></input>\n                    <label for=\"hrs\">hr</label>\n                    <input value={practiceTime[1]} onChange={setMin} type=\"number\" id=\"min\" name=\"min\" min=\"0\" max=\"60\"></input>\n                    <label for=\"totalPracticeTime\">min</label>\n                    <input value={practiceTime[2]} onChange={setSec} type=\"number\" id=\"min\" name=\"min\" min=\"0\" max=\"60\"></input>\n                    <label for=\"min\">sec</label>\n                </div>\n                <h2>Material</h2>\n                <hr />\n                    <label htmlFor=\"topic\">Topic</label><br/>\n                    <TextareaAutosize required value={practiceTopicNotes.topic} onChange={setTopic} id=\"topic\" className=\"topic-input\" placeholder=\"What are you practicing?\" rows=\"2\" /> \n                    {/* <textarea value={practiceTopicNotes.topic} onChange={setTopic} id=\"topic\" className=\"topic-input\" placeholder=\"What are you practicing?\" rows=\"2\" />  */}\n                    <br />\n                    <label htmlFor=\"notes\">Notes</label><br/>\n                    <TextareaAutosize value={practiceTopicNotes.notes} onChange={setNotes} id=\"notes\" type=\"text\" placeholder=\"Add notes like tempos, keys, and goals here...\" rows=\"5\" />\n                    {/* <textarea value={practiceTopicNotes.notes} onChange={setNotes} id=\"notes\" type=\"text\" placeholder=\"Add notes like tempos, keys, and goals here...\" rows=\"5\" /> */}\n                    <br />\n                    <button type=\"submit\" className=\"timerBtn submitBtn\">Submit</button>\n                    <button onClick={handleCancel} type=\"reset\" className=\"timerBtn cancelBtn\">Cancel</button>\n                </form>\n            </div>\n            <div className=\"modal-container\">\n                <div className=\"modal\">\n                    <h2>What are you practicing?</h2>\n                    <TextareaAutosize minRows=\"3\" autoFocus />\n                    <h2>How long are you practicing?</h2>\n                    <TextareaAutosize minRows=\"3\"/>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/index.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/VegBurg.js",["148"],"/Users/lanegarner/Documents/Dev/shedr/src/icons/UserIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/RecordIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/VegBurgIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/MetDroneIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/HomeIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/ForkIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/Login.js",["149","150","151"],"import React, { useEffect } from 'react'\nimport './Login.css'\nimport firebase from '../firebase';\nimport * as firebaseui from 'firebaseui'\nimport 'firebaseui/dist/firebaseui.css'\nimport { startFirebaseUI } from '../firebase'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\n\n// const ui = new auth.AuthUI(firebase.auth());\nexport const Login = ({ uiConfig, firebaseAuth }) => {\n\n    useEffect(() => {\n        // startFirebaseUI ('#firebaseui')\n    },[])\n\n    return (\n        <div className=\"Login-container\">\n            <h1>Login</h1>\n            <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebaseAuth}/>\n        </div>\n    )\n}\n\n","/Users/lanegarner/Documents/Dev/shedr/src/icons/Logo.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/MetDrone.js",["152"],"import Metronome from './Components/Metronome';\nimport { Drone } from './Components/Drone';\n\nexport const MetDrone = ({ setActivePage, tempo, setTempo, playing, setPlaying, timeSig, setTimeSig, position, setPosition, accent, setAccent, droning, setDroning, droneVolume, setDroneVolume, root, setRoot, chordType, setChordType }) => {\n    setActivePage(\"metdrone\")\n\n    {droneVolume === undefined && setDroneVolume(-10)}\n\n    const styles = {\n        metDroneContainer: {\n            paddingTop: \"8em\",\n            backgroundColor: \"#333\",\n            paddingBottom: \"8em\",\n            minHeight: \"70vh\",\n\n        },\n        metDroneHeadline: {\n            textAlign: \"center\",\n            color: \"#5AC18E\",\n            paddingBottom: \"0\",\n        },\n        metDroneComponentContainer: {\n            display: \"flex\",\n            alignItems: \"flex-start\",\n            justifyItems: \"center\",\n            justifyContent: \"space-around\",\n            flexWrap: \"wrap\",\n        }\n    };\n\n    return (\n        // <div>\n            <div style={styles.metDroneContainer}>\n            <h1 style={styles.metDroneHeadline}>MetDrone</h1>\n                <div style={styles.metDroneComponentContainer}>\n                    <div style={{padding: '3em'}}>\n                        <Metronome tempo={tempo} setTempo={setTempo} playing={playing} setPlaying={setPlaying} timeSig={timeSig} setTimeSig={setTimeSig} position={position} setPosition={setPosition} accent={accent} setAccent={setAccent} />\n                    </div>\n                    <div style={{padding: '3em'}}>\n                        <Drone droning={droning} setDroning={setDroning} droneVolume={droneVolume} setDroneVolume={setDroneVolume} root={root} setRoot={setRoot} chordType={chordType} setChordType={setChordType} />\n                    </div>\n                </div>\n            </div>\n        // </div>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Drone.js",["153"],"import React, { useState, useEffect } from 'react'\nimport './Drone.css'\nimport * as Tone from 'tone'\nimport StartAudioContext from 'startaudiocontext'\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport { Chord, ChordType } from \"@tonaljs/tonal\";\n\nconst synth = new Tone.PolySynth({\n    oscillator: {\n        type: \"sine\"\n    },\n    envelope: {\n        attack: 2,\n        decay: 1,\n        sustain: 1,\n        release: 0.5,\n    },\n});\nconst filter = new Tone.Filter(2000, \"lowpass\")\nconst verb = new Tone.Reverb(1)\nconst wide = new Tone.StereoWidener()\nsynth.chain( filter, verb, wide, Tone.Destination)\n\nlet chord;\n\n// const [droneVolume, setDroneVolume] = useState(-10)\n// const [root, setRoot] = useState(\"C\")\n// const [chordType, setChordType] = useState(\"minor ninth\")\n\nexport const Drone = ({  droning, setDroning, droneVolume, setDroneVolume, root, setRoot, chordType, setChordType }) => {\n    let myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n    const chordTypes = ChordType.names()\n    chord = myChord.notes\n    // useEffect(() => {\n    //     setDroning(false)\n    //     myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n    //     chord = myChord.notes\n    // }, [root])\n    \n    const startDrone = () => {\n        StartAudioContext(Tone.context)\n        setDroning(true)\n        synth.triggerAttack(chord)\n    }\n\n    useEffect(() => {\n        !droning && synth.releaseAll();\n    }, [droning])\n    \n\n    useEffect(() => {\n        synth.volume.value = droneVolume\n        console.log(synth.volume.value)\n    }, [droneVolume])\n\n    const handleChordTypeChange = (e) => {\n        setChordType(e.target.value)\n        setDroning(false)\n        myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n        chord = myChord.notes\n    }\n\n    const handleRootChange = (e) => {\n        setRoot(e.target.value)\n        setDroning(false)\n        myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n        chord = myChord.notes\n    }\n    \n\n    return (\n        <div className=\"Drone\">\n            {droning ? <h1 style={{color: \"orange\"}}>drone</h1> : <h1 style={{color: \"white\"}}>drone</h1>}\n            <input \n                value={root} \n                onChange={handleRootChange}\n                type=\"text\" \n                placeholder=\"root\"/>\n            <select value={chordType} onChange={handleChordTypeChange} name=\"selectDroneRoot\" id=\"selectDroneRoot\">\n                {chordTypes.map((chord, id) => <option key={id} value={chord}>{chord}</option>)}\n            </select>\n\n            {!droning ? <button onClick={startDrone}>Start</button> : <button onClick={() => setDroning(!droning)}>Stop</button> }\n            \n            \n            <div>\n                <VolumeDown />\n                <input \n                    type=\"range\"\n                    min={-100}\n                    max={0}\n                    step=\"0.1\"\n                    value={droneVolume}\n                    onChange={(e) => setDroneVolume(e.target.value)}\n                />\n                <VolumeUp />\n            </div>\n        </div>\n    )\n}\n","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Metronome.js",["154","155","156","157","158","159","160","161"],"import { useState, useEffect } from 'react';\nimport './Metronome.css';\nimport * as Tone from 'tone'\nimport { TimeSigSelect } from \"./TimeSigSelect\";\nimport { Accent } from \"./Accent\"\nimport click1Sample from '../click1.flac';\nimport click2Sample from '../click2.wav';\nimport click3Sample from '../click3.wav';\nimport StartAudioContext from 'startaudiocontext'\n\nconst click1 = new Tone.Player(click1Sample).toDestination()\nconst click2 = new Tone.Player(click2Sample).toDestination()\nconst click3 = new Tone.Player(click3Sample).toDestination()\n\nconst Metronome = ({ tempo, setTempo, playing, setPlaying, timeSig, setTimeSig, position, setPosition, accent, setAccent }) => {    \n    const [ bpm, setBpm ] = useState(120);\n    const [ subdivision, setSubDivision ] = useState(\"\");\n\n\n\n    // useEffect(() => {\n        \n    //     if (playing) {\n    //         stopClick()\n    //         playClick()\n    //     } \n\n    // }, [accent, timeSig, tempo])\n\n    const handleAccent = () => {\n        if (playing) {\n            setAccent(!accent)\n            stopClick()\n            playClick()\n        } else {\n            setAccent(!accent)\n        }\n    }\n\n    const handleTimeSig = (e) => {\n        setTimeSig(parseInt(e.target.value))\n        if (playing) {\n            stopClick()\n            playClick()\n        }\n    }\n    \n    const handleTempo = (e) => {\n        setTempo(e.target.value)\n        if (playing) {\n            stopClick()\n            playClick()\n        }\n    }\n    \n\n    \n    const startStop = () => {\n        StartAudioContext(Tone.context)\n        Tone.start()\n\n        if(!playing) {\n            setPlaying(true)\n            playClick()\n        } else {\n            Tone.Transport.cancel();\n            Tone.Transport.stop();\n            setPlaying(false)\n        }\n    }\n\n    const playClick = () => {\n        const bpmNum = parseInt(tempo);\n        \n        Tone.Transport.bpm.value = bpmNum;\n        Tone.Transport.timeSignature = timeSig;        \n        \n        accent && (\n        Tone.Transport.scheduleRepeat((time) => {\n            click1.start(time)\n        }, \"1m\")\n        )        \n        \n        Tone.Transport.scheduleRepeat((time) => {\n            setPosition(Tone.Transport.position)\n            click3.start(time)\n            console.log(Tone.Transport.position)\n        }, \"4n\");\n        \n        Tone.Transport.start();\n    }\n\n    const stopClick = () => {\n        Tone.Transport.stop();\n        Tone.Transport.cancel();\n        Tone.Transport.position = \"0:0:0\"\n    }\n\n    const newPosition = parseInt(Tone.Transport.position.split(':')[1])\n\n    return (\n        <div className=\"metronome\">\n        {playing ? <h1 style={{color: \"orange\"}}>met</h1> : <h1 style={{color: \"white\"}}>met</h1>}\n        <div>\n            <input checked={accent} type=\"checkbox\" id=\"checkbox\" onChange={handleAccent} />\n            <label htmlFor=\"Accent\">Accent</label>\n        </div>\n        <label htmlFor=\"selectTimeSig\">Time signature</label>\n        <select onChange={handleTimeSig} name=\"selectTimeSig\" id=\"selectTimeSig\" value={timeSig}>\n            <option value=\"4\">4/4</option>\n            <option value=\"3\">3/4</option>\n            <option value=\"5\">5/4</option>\n            <option value=\"7\">7/4</option>\n        </select>\n        <div className=\"bpm-slider\">\n            <label htmlFor=\"bpmSlider\">Tempo</label>\n            <div>{tempo} BPM</div>\n            <input\n                id=\"bpmSlider\"\n                className=\"Slider\"\n                type=\"range\"\n                min=\"01\"\n                max=\"500\"\n                value={tempo}\n                onChange={handleTempo} />\n        </div>\n        <button id=\"startStopBtn\" onClick={startStop}>\n            {playing ? 'Stop' : 'Start'}\n        </button>\n        <button>Tap</button>\n        {playing ? <h3 className=\"Count\" style={{\"fontSize\": \"6em\", \"color\":\"#FFF\"}}>{newPosition + 1}</h3> : <div></div>}\n        \n        </div>\n    )\n}\n\nexport default Metronome;","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Accent.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/TimeSigSelect.js",[],{"ruleId":"162","severity":1,"message":"163","line":1,"column":38,"nodeType":"164","messageId":"165","endLine":1,"endColumn":48},{"ruleId":"162","severity":1,"message":"166","line":2,"column":25,"nodeType":"164","messageId":"165","endLine":2,"endColumn":34},{"ruleId":"162","severity":1,"message":"167","line":13,"column":10,"nodeType":"164","messageId":"165","endLine":13,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":120,"column":110,"nodeType":"170","endLine":120,"endColumn":121},{"ruleId":"162","severity":1,"message":"171","line":2,"column":13,"nodeType":"164","messageId":"165","endLine":2,"endColumn":23},{"ruleId":"162","severity":1,"message":"172","line":7,"column":10,"nodeType":"164","messageId":"165","endLine":7,"endColumn":14},{"ruleId":"162","severity":1,"message":"173","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"174","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":33},{"ruleId":"162","severity":1,"message":"175","line":15,"column":11,"nodeType":"164","messageId":"165","endLine":15,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":21,"column":9,"nodeType":"178","messageId":"179","endLine":21,"endColumn":47},{"ruleId":"176","severity":1,"message":"177","line":66,"column":9,"nodeType":"178","messageId":"179","endLine":66,"endColumn":34},{"ruleId":"162","severity":1,"message":"180","line":88,"column":11,"nodeType":"164","messageId":"165","endLine":88,"endColumn":16},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"162","severity":1,"message":"185","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"186","line":6,"column":10,"nodeType":"164","messageId":"165","endLine":6,"endColumn":19},{"ruleId":"162","severity":1,"message":"187","line":10,"column":10,"nodeType":"164","messageId":"165","endLine":10,"endColumn":21},{"ruleId":"162","severity":1,"message":"188","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":19},{"ruleId":"162","severity":1,"message":"189","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":17},{"ruleId":"190","severity":1,"message":"191","line":32,"column":16,"nodeType":"192","endLine":32,"endColumn":22,"suggestions":"193"},{"ruleId":"162","severity":1,"message":"194","line":36,"column":9,"nodeType":"164","messageId":"165","endLine":36,"endColumn":17},{"ruleId":"162","severity":1,"message":"173","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"188","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"174","line":1,"column":38,"nodeType":"164","messageId":"165","endLine":1,"endColumn":44},{"ruleId":"176","severity":1,"message":"177","line":16,"column":5,"nodeType":"178","messageId":"179","endLine":16,"endColumn":46},{"ruleId":"195","severity":1,"message":"196","line":41,"column":13,"nodeType":"197","endLine":41,"endColumn":78},{"ruleId":"162","severity":1,"message":"198","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":16},{"ruleId":"162","severity":1,"message":"171","line":4,"column":13,"nodeType":"164","messageId":"165","endLine":4,"endColumn":23},{"ruleId":"162","severity":1,"message":"199","line":6,"column":10,"nodeType":"164","messageId":"165","endLine":6,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":7,"column":5,"nodeType":"178","messageId":"179","endLine":7,"endColumn":55},{"ruleId":"162","severity":1,"message":"173","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"188","line":1,"column":20,"nodeType":"164","messageId":"165","endLine":1,"endColumn":29},{"ruleId":"162","severity":1,"message":"200","line":4,"column":10,"nodeType":"164","messageId":"165","endLine":4,"endColumn":23},{"ruleId":"162","severity":1,"message":"201","line":5,"column":10,"nodeType":"164","messageId":"165","endLine":5,"endColumn":16},{"ruleId":"162","severity":1,"message":"202","line":12,"column":7,"nodeType":"164","messageId":"165","endLine":12,"endColumn":13},{"ruleId":"162","severity":1,"message":"203","line":16,"column":13,"nodeType":"164","messageId":"165","endLine":16,"endColumn":16},{"ruleId":"162","severity":1,"message":"204","line":16,"column":18,"nodeType":"164","messageId":"165","endLine":16,"endColumn":24},{"ruleId":"162","severity":1,"message":"205","line":17,"column":13,"nodeType":"164","messageId":"165","endLine":17,"endColumn":24},{"ruleId":"162","severity":1,"message":"206","line":17,"column":26,"nodeType":"164","messageId":"165","endLine":17,"endColumn":40},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'PracticeTimer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'firebaseui' is defined but never used.","'Home' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'test' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'reset' is assigned a value but never used.","no-native-reassign",["207"],"no-negated-in-lhs",["208"],"'findByLabelText' is defined but never used.","'matchPath' is defined but never used.","'VegBurgIcon' is defined but never used.","'useEffect' is defined but never used.","'dummyData' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLogs'. Either include it or remove the dependency array. If 'setLogs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["209"],"'userLogs' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'firebase' is defined but never used.","'startFirebaseUI' is defined but never used.","'TimeSigSelect' is defined but never used.","'Accent' is defined but never used.","'click2' is assigned a value but never used.","'bpm' is assigned a value but never used.","'setBpm' is assigned a value but never used.","'subdivision' is assigned a value but never used.","'setSubDivision' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},"Update the dependencies array to be: [setLogs, user]",{"range":"212","text":"213"},[1035,1041],"[setLogs, user]"]
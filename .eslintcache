[{"/Users/lanegarner/Documents/Dev/shedr/src/index.js":"1","/Users/lanegarner/Documents/Dev/shedr/src/App.js":"2","/Users/lanegarner/Documents/Dev/shedr/src/firebase.js":"3","/Users/lanegarner/Documents/Dev/shedr/src/Router.js":"4","/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeTimer.js":"5","/Users/lanegarner/Documents/Dev/shedr/src/components/Header.js":"6","/Users/lanegarner/Documents/Dev/shedr/src/components/Footer.js":"7","/Users/lanegarner/Documents/Dev/shedr/src/components/Fork.js":"8","/Users/lanegarner/Documents/Dev/shedr/src/components/User.js":"9","/Users/lanegarner/Documents/Dev/shedr/src/components/Record.js":"10","/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeLog.js":"11","/Users/lanegarner/Documents/Dev/shedr/src/components/NewSessionForm.js":"12","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/index.js":"13","/Users/lanegarner/Documents/Dev/shedr/src/components/VegBurg.js":"14","/Users/lanegarner/Documents/Dev/shedr/src/icons/UserIcon.js":"15","/Users/lanegarner/Documents/Dev/shedr/src/icons/RecordIcon.js":"16","/Users/lanegarner/Documents/Dev/shedr/src/icons/VegBurgIcon.js":"17","/Users/lanegarner/Documents/Dev/shedr/src/icons/MetDroneIcon.js":"18","/Users/lanegarner/Documents/Dev/shedr/src/icons/HomeIcon.js":"19","/Users/lanegarner/Documents/Dev/shedr/src/icons/ForkIcon.js":"20","/Users/lanegarner/Documents/Dev/shedr/src/components/Login.js":"21","/Users/lanegarner/Documents/Dev/shedr/src/icons/Logo.js":"22","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/MetDrone.js":"23","/Users/lanegarner/Documents/Dev/shedr/src/icons/CloseIcon.js":"24","/Users/lanegarner/Documents/Dev/shedr/src/icons/EditIcon.js":"25","/Users/lanegarner/Documents/Dev/shedr/src/icons/PaperClipIcon.js":"26","/Users/lanegarner/Documents/Dev/shedr/src/icons/PieChartIcon.js":"27","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Drone.js":"28","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Metronome.js":"29","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/TimeSigSelect.js":"30","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Accent.js":"31","/Users/lanegarner/Documents/Dev/shedr/src/icons/ClockIcon.js":"32","/Users/lanegarner/Documents/Dev/shedr/src/Store.js":"33","/Users/lanegarner/Documents/Dev/shedr/src/icons/LogoIconSmall.js":"34","/Users/lanegarner/Documents/Dev/shedr/src/icons/LogIconSmall.js":"35","/Users/lanegarner/Documents/Dev/shedr/src/icons/LogIcon.js":"36","/Users/lanegarner/Documents/Dev/shedr/src/components/RepList.js":"37","/Users/lanegarner/Documents/Dev/shedr/src/components/Feedback.js":"38","/Users/lanegarner/Documents/Dev/shedr/src/ProtectedRoute.js":"39","/Users/lanegarner/Documents/Dev/shedr/src/firebaseAuthContext.js":"40","/Users/lanegarner/Documents/Dev/shedr/src/icons/TrashIcon.js":"41","/Users/lanegarner/Documents/Dev/shedr/src/icons/RecordIconLarge.js":"42","/Users/lanegarner/Documents/Dev/shedr/src/components/MyRecordings.js":"43","/Users/lanegarner/Documents/Dev/shedr/src/components/Home.js":"44","/Users/lanegarner/Documents/Dev/shedr/src/components/Log.js":"45","/Users/lanegarner/Documents/Dev/shedr/src/components/NewRecording.js":"46","/Users/lanegarner/Documents/Dev/shedr/src/icons/LogIconHeader.js":"47","/Users/lanegarner/Documents/Dev/shedr/src/images/FlatGuitarist.js":"48","/Users/lanegarner/Documents/Dev/shedr/src/images/FlatDrummer.js":"49","/Users/lanegarner/Documents/Dev/shedr/src/images/FlatFemaleGuitarist.js":"50","/Users/lanegarner/Documents/Dev/shedr/src/images/FlatPianist.js":"51","/Users/lanegarner/Documents/Dev/shedr/src/icons/MetDroneIconLarge.js":"52","/Users/lanegarner/Documents/Dev/shedr/src/icons/ForkIconLarge.js":"53"},{"size":255,"mtime":1615942445729,"results":"54","hashOfConfig":"55"},{"size":752,"mtime":1614202063916,"results":"56","hashOfConfig":"55"},{"size":1027,"mtime":1614372819703,"results":"57","hashOfConfig":"55"},{"size":1638,"mtime":1615864444965,"results":"58","hashOfConfig":"55"},{"size":1081,"mtime":1615855576296,"results":"59","hashOfConfig":"55"},{"size":1745,"mtime":1615864470047,"results":"60","hashOfConfig":"55"},{"size":1114,"mtime":1615855339176,"results":"61","hashOfConfig":"55"},{"size":836,"mtime":1613720734214,"results":"62","hashOfConfig":"55"},{"size":3274,"mtime":1615940210876,"results":"63","hashOfConfig":"55"},{"size":589,"mtime":1615941463668,"results":"64","hashOfConfig":"55"},{"size":9333,"mtime":1615855524239,"results":"65","hashOfConfig":"55"},{"size":14042,"mtime":1615856176185,"results":"66","hashOfConfig":"55"},{"size":61,"mtime":1612297958360,"results":"67","hashOfConfig":"55"},{"size":1397,"mtime":1615865254371,"results":"68","hashOfConfig":"55"},{"size":873,"mtime":1612799339284,"results":"69","hashOfConfig":"55"},{"size":977,"mtime":1614406152499,"results":"70","hashOfConfig":"55"},{"size":579,"mtime":1612286994566,"results":"71","hashOfConfig":"55"},{"size":1178,"mtime":1615838234760,"results":"72","hashOfConfig":"55"},{"size":658,"mtime":1615838698087,"results":"73","hashOfConfig":"55"},{"size":889,"mtime":1613808934244,"results":"74","hashOfConfig":"55"},{"size":349,"mtime":1615864587516,"results":"75","hashOfConfig":"55"},{"size":19145,"mtime":1615855134420,"results":"76","hashOfConfig":"55"},{"size":899,"mtime":1615857280192,"results":"77","hashOfConfig":"55"},{"size":571,"mtime":1613016751360,"results":"78","hashOfConfig":"55"},{"size":565,"mtime":1613078154086,"results":"79","hashOfConfig":"55"},{"size":805,"mtime":1613070173552,"results":"80","hashOfConfig":"55"},{"size":570,"mtime":1613069803267,"results":"81","hashOfConfig":"55"},{"size":3492,"mtime":1615857358288,"results":"82","hashOfConfig":"55"},{"size":8348,"mtime":1615911117598,"results":"83","hashOfConfig":"55"},{"size":475,"mtime":1612384701819,"results":"84","hashOfConfig":"55"},{"size":250,"mtime":1611363999277,"results":"85","hashOfConfig":"55"},{"size":661,"mtime":1613808799233,"results":"86","hashOfConfig":"55"},{"size":4266,"mtime":1615435875680,"results":"87","hashOfConfig":"55"},{"size":19109,"mtime":1615838530363,"results":"88","hashOfConfig":"55"},{"size":5401,"mtime":1615837547278,"results":"89","hashOfConfig":"55"},{"size":5398,"mtime":1615855161516,"results":"90","hashOfConfig":"55"},{"size":10186,"mtime":1615856822954,"results":"91","hashOfConfig":"55"},{"size":2573,"mtime":1615855458138,"results":"92","hashOfConfig":"55"},{"size":589,"mtime":1614229203533,"results":"93","hashOfConfig":"55"},{"size":963,"mtime":1614229185901,"results":"94","hashOfConfig":"55"},{"size":516,"mtime":1614273038061,"results":"95","hashOfConfig":"55"},{"size":892,"mtime":1615939400164,"results":"96","hashOfConfig":"55"},{"size":3768,"mtime":1615940400924,"results":"97","hashOfConfig":"55"},{"size":2732,"mtime":1615930926280,"results":"98","hashOfConfig":"55"},{"size":895,"mtime":1615942289668,"results":"99","hashOfConfig":"55"},{"size":7635,"mtime":1615938285422,"results":"100","hashOfConfig":"55"},{"size":5454,"mtime":1615854829950,"results":"101","hashOfConfig":"55"},{"size":9776,"mtime":1615929446381,"results":"102","hashOfConfig":"55"},{"size":19379,"mtime":1615929954282,"results":"103","hashOfConfig":"55"},{"size":17516,"mtime":1615930470293,"results":"104","hashOfConfig":"55"},{"size":71666,"mtime":1615930520768,"results":"105","hashOfConfig":"55"},{"size":984,"mtime":1615940095661,"results":"106","hashOfConfig":"55"},{"size":834,"mtime":1615940231888,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hgxmb7",{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"113"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"113"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"113"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"113"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"113"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"113"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"113"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"113"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"113"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lanegarner/Documents/Dev/shedr/src/index.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/App.js",["226"],"import React, { useEffect, useContext } from 'react';\nimport { BrowserRouter } from 'react-router-dom'\nimport Router from './Router'\nimport {Header} from './components/Header'\nimport {Footer} from './components/Footer'\nimport { StoreContext } from './Store'\nimport { auth } from './firebase.js';\nimport FirebaseAuthContext from \"./firebaseAuthContext\";\n\n\nconst App = () => {\n  const { setUser } = useContext(StoreContext)\n  \n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n      } \n      });\n    },[])\n    \n  return (\n    <FirebaseAuthContext>\n      <BrowserRouter>\n        <Header />\n        <Router />\n        <Footer />\n      </BrowserRouter>\n    </FirebaseAuthContext>\n  );\n}\n\nexport default App",["227","228"],"/Users/lanegarner/Documents/Dev/shedr/src/firebase.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/Router.js",["229"],"import React from \"react\";\nimport { Switch, Route } from \"react-router\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { User } from \"./components/User\";\nimport { Record } from \"./components/Record\";\n// import { Record } from \"./components/NewRecording\";\nimport { Log } from \"./components/Log\";\nimport MetDrone from \"./components/MetDrone/\";\nimport { Fork } from \"./components/Fork\";\nimport { NewSessionForm } from \"./components/NewSessionForm\";\nimport { PracticeLog } from \"./components/PracticeLog\";\nimport { RepList } from \"./components/RepList\";\nimport { MyRecordings } from \"./components/MyRecordings\";\nimport { Feedback } from './components/Feedback';\nimport { Home } from './components/Home';\n\nconst Router = () => {\n    return (\n            <Switch>\n                <Route exact path=\"/dashboard\" component={User} />\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/record\" component={Record} />\n                <Route path=\"/metdrone\" component={MetDrone} />\n                <Route path=\"/fork\" component={Fork} />\n                <Route path=\"/log\" component={Log} />\n                <ProtectedRoute path=\"/practice-log\">\n                    <PracticeLog />\n                </ProtectedRoute>\n                <ProtectedRoute redirectTo=\"/User\" path=\"/rep\">\n                    <RepList />\n                </ProtectedRoute>\n                <ProtectedRoute redirectTo=\"/User\" path=\"/recordings\">\n                    <MyRecordings />\n                </ProtectedRoute>\n                <Route path=\"/feedback\" component={Feedback} />\n            </Switch>\n    )\n}\n\nexport default Router;","/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeTimer.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/Header.js",["230","231"],"import { useContext } from 'react'\nimport { StoreContext } from '../Store'\n\nimport { HomeIcon } from \"../icons/HomeIcon\"\nimport { UserIcon } from \"../icons/UserIcon\"\nimport { Link } from 'react-router-dom'\nimport { HamburgerSqueeze } from 'react-animated-burgers'\nimport { LogoIconSmall } from \"../icons/LogoIconSmall\"\nimport { LogIconHeader } from '../icons/LogIconHeader'\n\nimport VegBurg from \"./VegBurg\"\n\nimport \"./Header.scss\"\n\nexport const Header = () => {\n\n    const { activePage, tempo, playing, timeSig, droning, root, chordType, activeSession, isOpen, setIsOpen, closeMenu } = useContext(StoreContext)\n    return (\n        <header style={{zIndex: 1000}}>\n            <nav>\n                <Link onClick={closeMenu} to=\"/dashboard\">\n                    <HomeIcon activePage={activePage} />\n                </Link>\n            </nav>\n\n                <Link className=\"header-icon\" onClick={closeMenu} to=\"/\">\n                    <LogoIconSmall />\n                </Link>\n\n            <div className=\"burger-button\" onClick={() => setIsOpen(!isOpen)}>\n                <HamburgerSqueeze barColor=\"white\" isActive={isOpen} buttonWidth={40} />\n            </div>\n            <VegBurg closeMenu={closeMenu} isOpen={isOpen} setIsOpen={setIsOpen} />\n            { playing || droning ? (\n                <div className=\"header-alert\">\n                    {activeSession && <Link onClick={closeMenu} to=\"/form\">Current practice session</Link>}\n                    {playing && <Link onClick={closeMenu} to=\"./metdrone\">{tempo} BPM {timeSig}/4</Link>}\n                    {droning && <Link onClick={closeMenu} to=\"./metdrone\">{root} {chordType}</Link>}\n                </div>\n            ) :\n            <></>\n            }\n        </header>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/Footer.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/Fork.js",["232","233"],"import React, { useEffect, useContext } from \"react\";\nimport { StoreContext } from '../Store'\nimport { ForkIcon } from \"../icons/ForkIcon\";\n\nexport const Fork = () => {\n    const { activePage, setActivePage } = useContext(StoreContext)\n    \n    useEffect(() => {\n        setActivePage(\"fork\")\n        window.scrollTo(0, 0);\n    }, [])\n\n    const styles = {\n        forkContainer: {\n            paddingTop: \"10em\",\n            backgroundColor: \"#333\",\n            // height: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            // justifyItems: \"center\",\n            color: \"white\",\n        },\n    }\n    return (\n        <div style={styles.forkContainer}>\n            <ForkIcon />\n            <h1>fork</h1>\n            <p>Tuner coming soon...</p>\n        </div>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/User.js",["234"],"/Users/lanegarner/Documents/Dev/shedr/src/components/Record.js",["235"],"/Users/lanegarner/Documents/Dev/shedr/src/components/PracticeLog.js",["236","237"],"import React, { useEffect, useContext, useState } from 'react'\nimport { StoreContext } from '../Store'\n\nimport DatePicker from \"react-datepicker\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nimport { CloseIcon } from \"../icons/CloseIcon\"\nimport { EditIcon } from \"../icons/EditIcon\"\nimport { LogIcon } from \"../icons/LogIcon\"\n\nimport \"./PracticeLog.scss\";\n\nlet selectedLog;\n\nexport const PracticeLog = () => {\n    const { user, logs, setLogs, removeLog, firebase } = useContext(StoreContext)\n    const [ deleteLogModal, setDeleteLogModal] = useState(false)\n    const [ editLogModal, setEditLogModal] = useState(false)\n    const [ modalOpen, setModalOpen ] = useState(false)\n    const [ newStartDate, setNewStartDate ] = useState()\n    const [ newTopic, setNewTopic ] = useState()\n    const [ newNotes, setNewNotes ] = useState()\n    const [ newPracticeTime, setNewPracticeTime ] = useState()\n\n    useEffect(() => {\n        if(user) {        \n        const logsRef = firebase.database().ref('logs/' + user.uid);\n        logsRef.orderByChild(\"startDate\").on('value', (snapshot) => {\n            let logs = snapshot.val();\n            // const sortedActivities = logs.sort((a, b) => b.startDate - a.startDate)\n            let newState = [];\n            for (let log in logs) {\n                let thisDate = new Date(logs[log].startDate).toLocaleDateString()\n                thisDate = thisDate.replace(/\"/g,\"\")\n                let thisTime = new Date(logs[log].startDate).toLocaleTimeString()\n                newState.push({\n                    id: log,\n                    startDate: JSON.stringify(thisDate),\n                    startTime: JSON.stringify(thisTime),\n                    practiceTime: logs[log].practiceTime,\n                    practiceTopicNotes: logs[log].practiceTopicNotes,\n                    userId: logs[log].userId,\n                    });\n                }\n                setLogs(newState)\n            });\n        }\n    }, [user, setLogs])\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [])\n    \n    useEffect(()=> {\n        if (deleteLogModal || editLogModal ) {\n            setModalOpen(true)\n        } else {\n            setModalOpen(false)\n        }\n    }, [ deleteLogModal, editLogModal]);\n    \n    useEffect(() => {\n        if (modalOpen) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = 'unset';\n        }\n    }, [modalOpen]);\n\n    const handleDeleteLog = (log) => {\n        setDeleteLogModal(true)\n        selectedLog = log;\n    }\n\n    const confirmDeleteLog = () => {\n        removeLog(selectedLog)\n        setDeleteLogModal(false)\n    }\n\n    const handleEditLog = (log) => {\n        const startDateTime = `${log.startDate} ${log.startTime}`\n        setNewStartDate(startDateTime);\n        setNewNotes(log.practiceTopicNotes.notes);\n        setNewTopic(log.practiceTopicNotes.topic);\n        setNewPracticeTime(log.practiceTime)\n        setEditLogModal(true);\n        selectedLog = log;\n    }\n    \n    const confirmEditLog = () => {\n        editLog(selectedLog);\n        setEditLogModal(false);\n    }\n    \n    const editLog = (log) => {\n        const logId = log.id\n        const userId = log.userId\n        const logRef = firebase.database().ref(`/logs/${userId}/${logId}`);\n        const updatedLog = {userId, practiceTopicNotes: {notes: newNotes, topic: newTopic } , startDate: newStartDate, practiceTime: newPracticeTime };\n        logRef.update(updatedLog);        \n    }\n\n    const setNewHrs = (e) => {\n        const hours = e.target.value.padStart(2, \"0\")\n        const minutes = newPracticeTime[1]\n        const seconds = newPracticeTime[2]\n        const updatePracticeTime = [hours, minutes, seconds]\n        setNewPracticeTime(updatePracticeTime)\n    }\n\n    const setNewMin = (e) => {\n        const hours = newPracticeTime[0]\n        const minutes = e.target.value.padStart(2, \"0\")\n        const seconds = newPracticeTime[2]\n        const updatePracticeTime = [hours, minutes, seconds]\n        setNewPracticeTime(updatePracticeTime)\n    }\n\n    const setNewSec = (e) => {\n        const hours = newPracticeTime[0]\n        const minutes = newPracticeTime[1]\n        const seconds = e.target.value.padStart(2, \"0\")\n        const updatePracticeTime = [hours, minutes, seconds]\n        setNewPracticeTime(updatePracticeTime)\n    }\n    \n    return (\n        <div className=\"logContainer\">\n            {/* <LogIcon /> */}\n            <h1>Practice log</h1>\n            {logs.length === 0 && \n                <div>\n                    <p>You do not have any saved logs</p> \n                    <p>Create your first log above</p>\n                </div>\n        }\n            <div className=\"log-grid\">\n                {logs.map((log, idx) => (\n                    <div key={log.id} id={log.id} className=\"log-card\">\n                        <div id={log.id} className=\"log-card-header\">\n                            <div>\n                                <div className=\"edit-log-btn\" onClick={() => handleEditLog(log)}><EditIcon /></div>\n                                <div className=\"remove-log-btn\" onClick={() => handleDeleteLog(log.id)}><CloseIcon /></div>\n                            </div>\n                            <span className=\"cal-emoji\">🗓</span>\n                            <h2>{JSON.parse(log.startDate)}</h2>\n                    </div>\n                        <h2>{JSON.parse(log.startTime)}</h2>\n                        <h3>Total practice time:</h3>\n                        <span>\n                            <span>{log.practiceTime[0]}hrs {log.practiceTime[1]}min {log.practiceTime[2]}sec</span>\n                        </span><br />\n                        <h3>Topic:</h3>\n                        <span>{log.practiceTopicNotes.topic}</span>\n                        <h3>Notes:</h3>\n                        <span>{log.practiceTopicNotes.notes}</span>\n                    </div>\n                ))}\n            </div>\n            {deleteLogModal && (\n                <div className=\"modal-container\">\n                    <div className=\"modal\">\n                        <h2>Are you sure?</h2>\n                        <p>This will remove this item from your practice log</p>\n                        <button className=\"timerBtn cancelBtn\" onClick={()=>setDeleteLogModal(false)}>Cancel</button>\n                        <button className=\"timerBtn stopBtn\" onClick={confirmDeleteLog}>Delete</button>\n                    </div>\n                </div>) \n            }\n            {editLogModal && (\n                <div className=\"modal-container\">\n                    <div className=\"modal\">\n                        <form onSubmit={confirmEditLog}>\n                            {typeof selectedLog !== undefined && \n                            \n                            <div>\n                                <label htmlFor=\"datepicker\">Start time</label><br/>\n                                    <DatePicker\n                                        // className=\"datepicker\"\n                                        selected={new Date(newStartDate)}\n                                        onChange={(e) => setNewStartDate(e)}\n                                        id=\"datepicker\"\n                                        showTimeSelect\n                                        timeIntervals={1}\n                                        dateFormat=\"Pp\"\n                                    /><br />\n                                    <div className=\"pr-time-input\">\n                                        <h4>Total practice time:</h4>\n                                        <input value={newPracticeTime[0]} onChange={setNewHrs} type=\"number\" id=\"newHrs\" name=\"newHrs\" min=\"0\" max=\"99\"></input>\n                                        <label htmlFor=\"newHrs\">hr</label>\n                                        <input value={newPracticeTime[1]} onChange={setNewMin} type=\"number\" id=\"newMin\" name=\"newMin\" min=\"0\" max=\"60\"></input>\n                                        <label htmlFor=\"newMin\">min</label>\n                                        <input value={newPracticeTime[2]} onChange={setNewSec} type=\"number\" id=\"newSec\" name=\"newSec\" min=\"0\" max=\"60\"></input>\n                                        <label htmlFor=\"newSec\">sec</label>\n                                    </div>\n                                    <label htmlFor=\"topic\">Topic</label><br/>\n                                    <TextareaAutosize required value={newTopic} onChange={e=>setNewTopic(e.target.value)} id=\"topic\" /> \n                                    <br />\n                                    <label htmlFor=\"notes\">Notes</label><br/>\n                                    <TextareaAutosize value={newNotes} onChange={e=>setNewNotes(e.target.value)} id=\"notes\" type=\"text\" minRows=\"5\" />\n                                    <br />\n                            </div>\n                            }\n                            <div>\n                                <button type=\"submit\" className=\"timerBtn pauseBtn\">Save</button>\n                                <button className=\"timerBtn cancelBtn\" onClick={()=>setEditLogModal(false)}>Cancel</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>)\n            }\n        </div>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/NewSessionForm.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/index.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/VegBurg.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/UserIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/RecordIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/VegBurgIcon.js",[],["238","239"],"/Users/lanegarner/Documents/Dev/shedr/src/icons/MetDroneIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/HomeIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/ForkIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/Login.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/Logo.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/MetDrone.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/CloseIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/EditIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/PaperClipIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/PieChartIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Drone.js",["240","241"],"import React, { useEffect, useContext } from \"react\"\nimport { StoreContext } from \"../../../Store\"\n\nimport * as Tone from \"tone\"\nimport StartAudioContext from \"startaudiocontext\"\nimport { Chord, ChordType } from \"@tonaljs/tonal\";\n\nimport \"./Drone.scss\"\n\nconst synth = new Tone.PolySynth({\n    oscillator: {\n        type: \"sine\"\n    },\n    envelope: {\n        attack: 2,\n        decay: 1,\n        sustain: 1,\n        release: 0.5,\n    },\n});\nconst filter = new Tone.Filter(2000, \"lowpass\")\nconst verb = new Tone.Reverb(1)\nconst wide = new Tone.StereoWidener()\nsynth.chain( filter, verb, wide, Tone.Destination)\n\nlet chord;\n\nexport const Drone = () => {\n    \n    const { droning, setDroning, droneVolume, setDroneVolume, root, setRoot, chordType, setChordType } = useContext(StoreContext)\n\n\n\n    let myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n    const chordTypes = ChordType.names()\n    chord = myChord.notes\n    // useEffect(() => {\n    //     setDroning(false)\n    //     myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n    //     chord = myChord.notes\n    // }, [root])\n    \n    const startDrone = () => {\n        StartAudioContext(Tone.context)\n        setDroning(true)\n        synth.triggerAttack(chord)\n    }\n    \n    useEffect(() => {\n        !droning && synth.releaseAll();\n    }, [droning])\n    \n\n    const gainToDecibels = (value) => {\n        if (value == null) return 0\n        return 20 * (0.43429 * Math.log(value))\n    }\n\n    \n    useEffect(() => {\n        synth.volume.value = gainToDecibels(droneVolume);\n    }, [droneVolume])\n\n    const handleChordTypeChange = (e) => {\n        setChordType(e.target.value)\n        setDroning(false)\n        myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n        chord = myChord.notes\n    }\n\n    const handleRootChange = (e) => {\n        setRoot(e.target.value)\n        setDroning(false)\n        myChord = Chord.getChord(chordType, `${root}4`, `${root}5`);\n        chord = myChord.notes\n    }\n    \n    return (\n        <div className=\"Drone\">\n            {droning ? <h1 style={{color: \"#5AC18E\"}}>Drone</h1> : <h1 style={{color: \"white\"}}>Drone</h1>}\n            <label htmlFor=\"droneRoot\">Root</label><br/>\n            <input \n                id=\"droneRoot\"\n                value={root} \n                onChange={handleRootChange}\n                type=\"text\" \n                placeholder=\"Enter root\"/>\n            <label htmlFor=\"droneChord\">Chord type</label><br/>\n            <select id=\"droneChord\" value={chordType} onChange={handleChordTypeChange} name=\"selectDroneRoot\" id=\"selectDroneRoot\">\n                {chordTypes.map((chord, id) => <option key={id} value={chord}>{chord}</option>)}\n            </select>\n\n            <div className=\"bpm-slider\">\n                <label htmlFor=\"droneVolumeSlider\">Volume</label><br/>\n                <div>{droneVolume != 1 ? Math.round(droneVolume * 10): 11}</div>\n                <input \n                    id=\"droneVolumeSlider\"\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={droneVolume}\n                    onChange={(e) => setDroneVolume(e.target.value)}\n                />\n            </div>\n\n            {!droning ? \n            <button className=\"start-drone-btn\" onClick={startDrone}>Start</button> : \n            <button className=\"stop-drone-btn\" onClick={() => setDroning(!droning)}>Stop</button> }\n            \n        </div>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Metronome.js",["242","243","244","245","246","247"],"import { useState, useEffect, useRef , useContext} from 'react';\nimport { StoreContext } from '../../../Store'\n\nimport * as Tone from 'tone'\nimport StartAudioContext from 'startaudiocontext'\n\nimport click1Sample from '../click1.flac';\nimport click2Sample from '../click2.wav';\nimport click3Sample from '../click3.wav';\n\nimport './Metronome.scss';\n\nconst click1 = new Tone.Player(click1Sample).toDestination()\n//-------SAVE FOR POLYRHYTHM MODE!!!-------------\n// const click2 = new Tone.Player(click2Sample).toDestination()\nconst click3 = new Tone.Player(click3Sample).toDestination()\n\nconst Metronome = () => {    \n    const { tempo, setTempo, playing, setPlaying, timeSig, setTimeSig, setPosition, accent, setAccent, setClickVolume, clickVolume, polyrhythmMode, setPolyrhythmMode, polyrhythm, setPolyrhythm } = useContext(StoreContext)\n    const [taps, setTaps] = useState([])\n    \n    //-------SAVE FOR POLYRHYTHM MODE!!!-------------\n    const three = 0.6666666666666666666666666666666666666666666666666666667\n    const five = 0.4\n    const seven = 0.285714285714286\n    \n    const handleTapTempo = () => {\n        if(!playing) {\n            click3.start()\n        }\n        let time = Date.now()\n        const newTaps = [...taps, time]\n        if (newTaps.length === 3) {\n            newTaps.shift()\n        }\n        setTaps(newTaps)\n    }\n    \n    useEffect(() => {\n        if (taps.length > 1) {\n            let newTaps = []\n            \n            taps.map((tap, i) => {\n                const tapMath = 60000 / (taps[i] - taps[i - 1])\n                newTaps.push(tapMath)\n            })\n            newTaps.shift()\n            let avgBpm = newTaps = newTaps.reduce((a,b) => a + b, 0) / newTaps.length\n            avgBpm = Math.round(avgBpm)\n            setTempo(avgBpm)\n        }\n    }, [taps])\n    \n    const handleClickVolume = (e) => {\n        setClickVolume(e.target.value)\n    }\n    \n    const gainToDecibels = (value) => {\n        if (value == null) return 0\n        return 20 * (0.43429 * Math.log(value))\n    }\n    \n    useEffect(() => {\n        click1.volume.value = gainToDecibels(clickVolume)\n    }, [clickVolume])\n    \n    //-------SAVE FOR POLYRHYTHM MODE!!!-------------\n    // useEffect(() => {\n    //     click2.volume.value = gainToDecibels(clickVolume)\n    // }, [clickVolume])\n    \n    useEffect(() => {\n        click3.volume.value = gainToDecibels(clickVolume)\n    }, [clickVolume])\n    \n    const handleAccent = () => {\n        if (playing) {\n            stopClick()\n            setAccent(!accent)\n            playClick()\n        } else {\n            setAccent(!accent)\n        }\n    }\n    \n    const handleTimeSig = (e) => {\n        setTimeSig(parseInt(e.target.value))\n        if (playing) {\n            stopClick()\n            playClick()\n        }\n    }\n    \n    const handleTempo = (e) => {\n        setTempo(e.target.value)\n        if (playing) {\n            stopClick()\n            playClick()\n        }\n    }\n    \n    const handleTempoInput = (e) => {\n        if(e.target.value !== \"\") {\n            setTempo(e.target.value)\n        } else {\n            stopClick()\n            setPlaying(false)\n            setTempo(e.target.value)\n        }\n    }\n    \n    const startStop = () => {\n        StartAudioContext(Tone.context)\n        Tone.start()\n        \n        if(!playing) {\n            setPlaying(true)\n            playClick()\n        } else {\n            Tone.Transport.cancel();\n            Tone.Transport.stop();\n            setPlaying(false)\n        }\n    }\n    \n    const playClick = () => {\n        if (tempo !== \"\") {\n            const bpmNum = parseInt(tempo);\n        \n        Tone.Transport.bpm.value = bpmNum;\n        Tone.Transport.timeSignature = timeSig;        \n        \n        accent && (\n        Tone.Transport.scheduleRepeat((time) => {\n            click1.start(time)\n        }, \"1m\")\n        )        \n        \n        Tone.Transport.scheduleRepeat((time) => {\n            setPosition(Tone.Transport.position)\n            click3.start(time)\n        }, \"4n\");\n        \n        //-------SAVE FOR POLYRHYTHM MODE!!!-------------\n        // if(polyrhythmMode) {\n        //     setTimeSig(4)\n        //     Tone.Transport.scheduleRepeat((time) => {\n        //         setPosition(Tone.Transport.position)\n        //         click2.start(time)\n        //     }, polyrhythm);\n        // }\n\n        Tone.Transport.start();\n\n        }\n    }\n    \n    const stopClick = () => {\n        Tone.Transport.stop();\n        Tone.Transport.cancel();\n        Tone.Transport.position = \"0:0:0\"\n    }\n    \n    const newPosition = parseInt(Tone.Transport.position.split(':')[1])\n    \n    const didMountRef = useRef(false)\n    \n    useEffect(() => {\n        if (didMountRef.current) {\n            if (playing) {\n                stopClick()\n                playClick()\n            }\n        } else didMountRef.current = true\n    }, [accent, timeSig, tempo, polyrhythm, polyrhythmMode])\n    \n    return (\n        <div className=\"metronome\">\n            {playing ? <h1 style={{color: \"#5AC18E\"}}>Met</h1> : <h1 style={{color: \"white\"}}>Met</h1>}\n            <div>\n                <input checked={accent} type=\"checkbox\" id=\"accent\" onChange={handleAccent} />\n                <label htmlFor=\"accent\" style={{fontWeight: 400}} >Accent</label>\n            </div>\n            {/* //-------SAVE FOR POLYRHYTHM MODE!!!------------- */}\n            {/* <div>\n                <input checked={polyrhythmMode} type=\"checkbox\" id=\"poly\" onChange={()=>setPolyrhythmMode(!polyrhythmMode)} />\n                <label htmlFor=\"poly\" style={{fontWeight: 400}} >Polyrhythm mode</label>\n            </div> */}\n            <div className=\"met-settings\">\n                {!polyrhythmMode ? (\n                <>\n                    <label htmlFor=\"selectTimeSig\">Time signature</label><br/>\n                    <select onChange={handleTimeSig} name=\"selectTimeSig\" id=\"selectTimeSig\" value={timeSig}>\n                        <option value=\"4\">4/4</option>\n                        <option value=\"3\">3/4</option>\n                        <option value=\"5\">5/4</option>\n                        <option value=\"7\">7/4</option>\n                    </select>\n                </>\n                ) : (\n                    <>\n                        <label className=\"time-sig-label\" htmlFor=\"selectPoly\">Polyrhythm</label><br/>\n                        <select onChange={(e)=>setPolyrhythm(e.target.value)} name=\"selectPoly\" id=\"selectPoly\" value={polyrhythm}>\n                            {/* <option value=\"3:2\">3:2</option> */}\n                            <option value={three}>3:4</option>\n                            <option value={five}>5:4</option>\n                            <option value={seven}>7:4</option>\n                            {/* <option value=\"7:8\">7:8</option> */}\n                        </select>\n                    </>\n                )}\n                <div className=\"bpm-slider\">\n                    <label htmlFor=\"bpmSlider\">Tempo</label>\n                    <div><input style={{width: \"2em\", fontSize: \"1.5em\"}} type=\"text\" value={tempo} onChange={handleTempoInput} /> BPM</div>\n                    <input\n                        id=\"bpmSlider\"\n                        type=\"range\"\n                        min=\"01\"\n                        max=\"400\"\n                        value={tempo}\n                        onChange={handleTempo} \n                    />\n                </div>\n                <div className=\"bpm-slider\">\n                    <label htmlFor=\"volumeSlider\">Volume</label><br/>\n                    <div>{clickVolume != 1 ? Math.round(clickVolume * 10): 11}</div>\n                    <input \n                        id=\"volumeSlider\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=\"0.01\"\n                        value={clickVolume}\n                        onChange={handleClickVolume}\n                    />\n                </div>\n            </div>\n            <button id=\"startStopBtn\" onClick={startStop}>\n                {playing ? 'Stop' : 'Start'}\n            </button>\n            <button onMouseDown={handleTapTempo}>Tap</button>\n            {playing ? <h3 className=\"Count\" style={{\"fontSize\": \"6em\", \"color\":\"#FFF\"}}>{newPosition + 1}</h3> : <div></div>}\n        </div>\n    )\n}\n\nexport default Metronome\n","/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/TimeSigSelect.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MetDrone/Components/Accent.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/ClockIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/Store.js",["248"],"import React, { useState, createContext } from 'react'\nimport firebase, { auth } from './firebase.js';\n\nexport const StoreContext = createContext(null)\n\nexport default ({ children }) => {\n\n    const [user, setUser] = useState(null)\n    const [logs, setLogs] = useState([])\n\n    const [activePage, setActivePage] = useState()\n    \n    const [ isRecording, setIsRecording ] = useState(false)\n    const [ blobURL, setBlobURL ] = useState(\"\")\n    const [ isBlocked, setIsBlocked ] = useState(false)\n    const [ recordingCreated, setRecordingCreated ] = useState(false)\n\n    const [tempo, setTempo] = useState(120)\n    const [playing, setPlaying] = useState (false)\n    const [timeSig, setTimeSig] = useState(4)\n    const [position, setPosition] = useState(\"0:0:0\")\n    const [accent, setAccent] = useState(true)\n    const [clickVolume, setClickVolume] = useState(.99)\n    const [polyrhythmMode, setPolyrhythmMode] = useState(false)\n    const [polyrhythm, setPolyrhythm] = useState(.6666666666666666666666666666666666666666666666666666667)\n\n    const [droning, setDroning] = useState()\n    const [droneVolume, setDroneVolume] = useState(.99)\n    const [root, setRoot] = useState(\"C\")\n    const [chordType, setChordType] = useState(\"minor ninth\")\n\n    const [activeSession, setActiveSession] = useState()\n    const [startDate, setStartDate] = useState(Date.now());\n\n    const [timerStarted, setTimerStart] = useState(false)\n    const [timerRunning, setTimerRunning] = useState(false)\n    const [timerPaused, setTimerPaused] = useState(false)\n    const [tInterval, setTInterval] = useState()\n    const [timer, setTimer] = useState(\"00:00:00\")\n    const [differenceState, setDifferenceState] = useState()\n\n    const [recordTimerStarted, setRecordTimerStart] = useState(false)\n    const [recordTimerRunning, setRecordTimerRunning] = useState(false)\n    const [recordTimerPaused, setRecordTimerPaused] = useState(false)\n    const [recordTInterval, setRecordTInterval] = useState()\n    const [recordTimer, setRecordTimer] = useState(\"00:00:00\")\n    const [recordDifferenceState, setRecordDifferenceState] = useState()\n\n\n    const [practiceTime, setPracticeTime] = useState([\"00\", \"00\", \"00\"])\n    const [practiceTopicNotes, setPracticeTopicNotes] = useState({topic: \"\", notes: \"\"})\n    // const [newLog, setNewLog] = useState()\n\n    const [isOpen, setIsOpen] = useState(false)\n\n    const closeMenu = () => {\n        setIsOpen(false)\n    }\n\n    const removeLog = (logId) => {\n        const logsRef = firebase.database().ref(`/logs/${user.uid}/${logId}`);\n        logsRef.remove();\n    }\n    \n    const logout = () => {\n        auth.signOut()\n        .then(() => {\n        setUser(null)\n        });  \n    }\n\n    const store = {\n        user, setUser,\n        logs, setLogs,\n\n        activePage, setActivePage,\n\n        isRecording, setIsRecording, \n        blobURL, setBlobURL, \n        isBlocked, setIsBlocked,\n        recordingCreated, setRecordingCreated,\n\n        tempo, setTempo,\n        playing, setPlaying ,\n        timeSig, setTimeSig ,\n        position, setPosition ,\n        accent, setAccent ,\n        clickVolume, setClickVolume,\n        polyrhythmMode, setPolyrhythmMode,\n        polyrhythm, setPolyrhythm,\n        \n        droning, setDroning,\n        droneVolume, setDroneVolume,\n        root, setRoot,\n        chordType, setChordType,\n    \n        activeSession, setActiveSession,\n        startDate, setStartDate,\n    \n        timerStarted, setTimerStart,\n        timerRunning, setTimerRunning,\n        timerPaused, setTimerPaused,\n        tInterval, setTInterval,\n        timer, setTimer,\n        differenceState, setDifferenceState,\n\n        recordTimerStarted, setRecordTimerStart, \n        recordTimerRunning, setRecordTimerRunning, \n        recordTimerPaused, setRecordTimerPaused, \n        recordTInterval, setRecordTInterval, \n        recordTimer, setRecordTimer, \n        recordDifferenceState, setRecordDifferenceState,\n    \n        practiceTime, setPracticeTime,\n        practiceTopicNotes, setPracticeTopicNotes,\n        // newLog, setNewLog,\n    \n        isOpen, setIsOpen,\n\n        closeMenu, removeLog, logout, firebase\n\n        // firebase, auth, uiConfig\n\n    }\n\n    return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n}","/Users/lanegarner/Documents/Dev/shedr/src/icons/LogoIconSmall.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/LogIconSmall.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/LogIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/RepList.js",["249","250"],"import React, { useState, useEffect, useContext } from 'react';\nimport { StoreContext } from '../Store';\nimport { TrashIcon } from \"../icons/TrashIcon\";\nimport { EditIcon } from \"../icons/EditIcon\";\n\nimport \"./RepList.scss\"\n\nlet selectedRep;\n\nexport const RepList = () => {\n    const [ newTitle, setNewTitle ] = useState(\"\");\n    const [ newArtist, setNewArtist ] = useState(\"\");\n    const [ newStyle, setNewStyle ] = useState(\"\");\n    const [ newNotes, setNewNotes ] = useState(\"\");\n    const [ addRepModal, setAddRepModal ] = useState(false);\n    const [ modalOpen, setModalOpen ] = useState(false)\n    const [ filterRepertoire, setFilterRepertoire ] = useState(false)\n    const [ filterSearch, setFilterSearch ] = useState(\"\");\n    const [ rep, setRep ] = useState([]);\n    const [ deleteRepModal, setDeleteRepModal] = useState(false)\n    const [ editRepModal, setEditRepModal] = useState(false)\n\n\n    const { user, firebase, setActivePage } = useContext(StoreContext)\n\n    let userId\n    if(user) {\n        userId = user.uid\n    } else {\n        userId = null\n    }\n\n    const confirmAddRep = (e) => {\n        e.preventDefault();\n        const repRef = firebase.database().ref(\"repertoire/\" + userId);\n        const newRep = { title: newTitle, artist: newArtist, style: newStyle, notes: newNotes };\n        repRef.push(newRep);\n\n        setNewTitle(\"\");\n        setNewArtist(\"\");\n        setNewStyle(\"\");\n        setNewNotes(\"\");\n        setAddRepModal(false);\n    }\n\n    const handleDeleteRep = (id) => {\n        setDeleteRepModal(true)\n        selectedRep = id;\n    }\n    \n    const confirmDeleteRep = () => {\n        removeRep(selectedRep);\n        setDeleteRepModal(false);\n    }\n\n    const removeRep = (songId) => {\n        const songRef = firebase.database().ref(`/repertoire/${user.uid}/${songId}`);\n        songRef.remove();\n    }\n\n    const handleEditRep = (song) => {\n        setNewTitle(song.title)\n        setNewArtist(song.artist)\n        setNewStyle(song.style)\n        setNewNotes(song.notes)\n        setEditRepModal(true);\n        selectedRep = song.id;\n    }\n    \n    const confirmEditRep = () => {\n        editRep(selectedRep);\n        setEditRepModal(false);\n    }\n    \n    const editRep = (songId) => {\n        const songRef = firebase.database().ref(`/repertoire/${user.uid}/${songId}`);\n        const updatedSong = { title: newTitle, artist: newArtist, style: newStyle, notes: newNotes };\n        songRef.update(updatedSong); \n        setNewTitle(\"\");\n        setNewArtist(\"\");\n        setNewStyle(\"\");\n        setNewNotes(\"\");       \n    }\n    \n    \n    \n    useEffect(()=> {\n        if (addRepModal || deleteRepModal || editRepModal ) {\n            setModalOpen(true)\n        } else {\n            setModalOpen(false)\n        }\n    }, [addRepModal, deleteRepModal, editRepModal]);\n    \n    useEffect(() => {\n        if (modalOpen) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = 'unset';\n        }\n    }, [modalOpen]);\n    \n    useEffect(() => {\n        if(user) {        \n            const repertoireRef = firebase.database().ref('repertoire/' + user.uid);\n            repertoireRef.on('value', (snapshot) => {\n                const songs = snapshot.val();\n                let newState = [];\n                for (let song in songs) {\n                    newState.push({\n                        id: song,\n                        title: songs[song].title,\n                        artist: songs[song].artist,\n                        style: songs[song].style,\n                        notes: songs[song].notes,\n                        });\n                    }\n                setRep(newState);\n            });\n        }\n    }, [user]);\n    \n    //set active page for header/footer\n    // setActivePage(\"user\");\n    \n    //scroll to top on load\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [])\n\n    return (\n        <div className=\"rep-list-container\">\n            <h1>Repertoire List</h1>\n            <div>\n                <button className=\"timerBtn submitBtn\" onClick={()=>setAddRepModal(true)}>Add</button>\n                {rep.length !== 0 && \n                    <button className=\"timerBtn cancelBtn\" onClick={()=>setFilterRepertoire(!filterRepertoire)}>Filter</button>\n                }\n            </div>\n            {rep.length !== 0 ? (\n                <>\n                    {filterRepertoire && (\n                        <div>\n                            <label className=\"sr-only\" htmlFor=\"filterRep\">Filter</label>\n                            <input value={filterSearch} onChange={e=>setFilterSearch(e.target.value)} className=\"rep-search-field\" type=\"text\" id=\"filterRep\" placeholder=\"Filter song by title, artist, composer, etc...\" rows=\"5\" />\n                        </div>\n                    )}\n                    <table className=\"rep-table\">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Artist/Composer</th>\n                                <th>Style</th>\n                                <th>Notes</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {rep.length !== 0 && (\n                                rep.map((song)=> (\n                                    <tr key={song.id}>\n                                        <td>{song.title}</td>\n                                        <td>{song.artist}</td>\n                                        <td>{song.style}</td>\n                                        <td>\n                                            <div className=\"remove-edit-rep\">\n                                                <div className=\"rep-icon\" onClick={()=>handleEditRep(song)}>\n                                                    <EditIcon  />\n                                                </div>\n                                                <div className=\"rep-icon\" onClick={()=>handleDeleteRep(song.id)}>\n                                                    <TrashIcon />\n                                                </div>\n                                            </div>\n                                            <div className=\"rep-notes\">{song.notes}</div>\n                                        </td>\n                                    </tr>\n                                ))\n                            )}\n                        </tbody>\n                    </table>\n                    </>\n                ) :\n                <div>\n                    <p>You do not have any songs saved...</p> \n                    <p>Click above to add your first song</p>\n                    {/* <p>Click above to add your first song</p> */}\n                </div>\n            }\n            {addRepModal && (\n                <div className=\"modal-container\">\n                    <div className=\"modal\">\n                        <form className=\"add-rep\" onSubmit={confirmAddRep}>\n                        <h2>Add new song</h2>\n                            <label htmlFor=\"title\">Title</label>\n                            <input value={newTitle} onChange={e=>setNewTitle(e.target.value)} id=\"title\" type=\"text\"/>\n                            <label htmlFor=\"artistComposer\">Artist/Composer</label>\n                            <input value={newArtist} onChange={e=>setNewArtist(e.target.value)} id=\"artistComposer\" type=\"text\"/>\n                            <label htmlFor=\"style\">Style</label>\n                            <input value={newStyle} onChange={e=>setNewStyle(e.target.value)} id=\"style\" type=\"text\"/>\n                            <label htmlFor=\"title\">Notes</label>\n                            <input value={newNotes} onChange={e=>setNewNotes(e.target.value)} id=\"notes\" type=\"text\"/>\n                            <div>\n                                <button className=\"timerBtn stopBtn\" onClick={()=>setAddRepModal(false)}>Cancel</button>\n                                <button type=\"submit\" className=\"timerBtn startBtn\">Add</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>)\n            }\n            {deleteRepModal && (\n                <div className=\"modal-container\">\n                    <div className=\"modal\">\n                        <h2>Are you sure?</h2>\n                        <p>This will delete this item from your repertoire list</p>\n                        <button className=\"timerBtn cancelBtn\" onClick={()=>setDeleteRepModal(false)}>Cancel</button>\n                        <button className=\"timerBtn stopBtn\" onClick={confirmDeleteRep}>Delete</button>\n                    </div>\n                </div>)\n            }\n            {editRepModal && (\n                <div className=\"modal-container\">\n                    <div className=\"modal\">\n                    <form className=\"add-rep\" onSubmit={confirmAddRep}>\n                        <h2>Edit Rep</h2>\n                            <label htmlFor=\"title\">Title</label>\n                            <input value={newTitle} onChange={e=>setNewTitle(e.target.value)} id=\"title\" type=\"text\"/>\n                            <label htmlFor=\"artistComposer\">Artist/Composer</label>\n                            <input value={newArtist} onChange={e=>setNewArtist(e.target.value)} id=\"artistComposer\" type=\"text\"/>\n                            <label htmlFor=\"style\">Style</label>\n                            <input value={newStyle} onChange={e=>setNewStyle(e.target.value)} id=\"style\" type=\"text\"/>\n                            <label htmlFor=\"title\">Notes</label>\n                            <input value={newNotes} onChange={e=>setNewNotes(e.target.value)} id=\"notes\" type=\"text\"/>\n                            <div>\n                                <button className=\"timerBtn startBtn\" onClick={confirmEditRep}>Save</button>\n                                <button className=\"timerBtn cancelBtn\" onClick={()=>setEditRepModal(false)}>Cancel</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>)\n            }\n        </div>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/components/Feedback.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/ProtectedRoute.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/firebaseAuthContext.js",["251"],"import React, {createContext,useState, useEffect} from 'react';\nimport {auth} from './firebase';\nexport const AuthContext= createContext({userPresent:false,User:null})\nexport default function FirebaseAuthContext(props){\n    \n\n    let [state,changeState] = useState({\n        userDataPresent:false,\n        \n        User:null,\n        listener:null\n    })\n\n    useEffect(()=>{\n        \n        if(state.listener==null){\n        \n    \n        changeState({...state,listener:auth.onAuthStateChanged((User)=>{\n            \n        if(User)\n            changeState(oldState=>({...oldState,userDataPresent:true,User:User}));\n            else\n            changeState(oldState=>({...oldState,userDataPresent:true,User:null}));\n        })});\n        \n    }\n    return ()=>{\n    if(state.listener)\n        state.listener()\n    }\n    \n    },[])\n\n\n\n    return (\n        <AuthContext.Provider value={state}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}","/Users/lanegarner/Documents/Dev/shedr/src/icons/TrashIcon.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/RecordIconLarge.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/components/MyRecordings.js",["252","253","254","255","256","257","258"],"/Users/lanegarner/Documents/Dev/shedr/src/components/Home.js",["259","260","261","262","263"],"/Users/lanegarner/Documents/Dev/shedr/src/components/Log.js",["264"],"/Users/lanegarner/Documents/Dev/shedr/src/components/NewRecording.js",["265","266","267"],"/Users/lanegarner/Documents/Dev/shedr/src/icons/LogIconHeader.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/images/FlatGuitarist.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/images/FlatDrummer.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/images/FlatFemaleGuitarist.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/images/FlatPianist.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/MetDroneIconLarge.js",[],"/Users/lanegarner/Documents/Dev/shedr/src/icons/ForkIconLarge.js",[],{"ruleId":"268","severity":1,"message":"269","line":20,"column":7,"nodeType":"270","endLine":20,"endColumn":9,"suggestions":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":10,"column":10,"nodeType":"278","messageId":"279","endLine":10,"endColumn":24},{"ruleId":"276","severity":1,"message":"280","line":5,"column":10,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"281","line":9,"column":10,"nodeType":"278","messageId":"279","endLine":9,"endColumn":23},{"ruleId":"276","severity":1,"message":"282","line":6,"column":13,"nodeType":"278","messageId":"279","endLine":6,"endColumn":23},{"ruleId":"268","severity":1,"message":"283","line":11,"column":8,"nodeType":"270","endLine":11,"endColumn":10,"suggestions":"284"},{"ruleId":"276","severity":1,"message":"285","line":21,"column":34,"nodeType":"278","messageId":"279","endLine":21,"endColumn":45},{"ruleId":"268","severity":1,"message":"283","line":13,"column":8,"nodeType":"270","endLine":13,"endColumn":10,"suggestions":"286"},{"ruleId":"276","severity":1,"message":"287","line":9,"column":10,"nodeType":"278","messageId":"279","endLine":9,"endColumn":17},{"ruleId":"268","severity":1,"message":"288","line":48,"column":8,"nodeType":"270","endLine":48,"endColumn":23,"suggestions":"289"},{"ruleId":"272","replacedBy":"290"},{"ruleId":"274","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":89,"column":111,"nodeType":"294","endLine":89,"endColumn":131},{"ruleId":"295","severity":1,"message":"296","line":95,"column":35,"nodeType":"297","messageId":"298","endLine":95,"endColumn":37},{"ruleId":"276","severity":1,"message":"299","line":8,"column":8,"nodeType":"278","messageId":"279","endLine":8,"endColumn":20},{"ruleId":"276","severity":1,"message":"300","line":19,"column":149,"nodeType":"278","messageId":"279","endLine":19,"endColumn":166},{"ruleId":"301","severity":1,"message":"302","line":43,"column":31,"nodeType":"303","messageId":"304","endLine":43,"endColumn":33},{"ruleId":"268","severity":1,"message":"305","line":52,"column":8,"nodeType":"270","endLine":52,"endColumn":14,"suggestions":"306"},{"ruleId":"268","severity":1,"message":"307","line":175,"column":8,"nodeType":"270","endLine":175,"endColumn":60,"suggestions":"308"},{"ruleId":"295","severity":1,"message":"296","line":226,"column":39,"nodeType":"297","messageId":"298","endLine":226,"endColumn":41},{"ruleId":"309","severity":1,"message":"310","line":6,"column":1,"nodeType":"311","endLine":127,"endColumn":2},{"ruleId":"276","severity":1,"message":"312","line":24,"column":29,"nodeType":"278","messageId":"279","endLine":24,"endColumn":42},{"ruleId":"268","severity":1,"message":"288","line":121,"column":8,"nodeType":"270","endLine":121,"endColumn":14,"suggestions":"313"},{"ruleId":"268","severity":1,"message":"314","line":33,"column":7,"nodeType":"270","endLine":33,"endColumn":9,"suggestions":"315"},{"ruleId":"268","severity":1,"message":"316","line":23,"column":22,"nodeType":"317","endLine":23,"endColumn":30},{"ruleId":"268","severity":1,"message":"318","line":24,"column":23,"nodeType":"319","endLine":24,"endColumn":64},{"ruleId":"276","severity":1,"message":"320","line":25,"column":13,"nodeType":"278","messageId":"279","endLine":25,"endColumn":20},{"ruleId":"268","severity":1,"message":"321","line":25,"column":23,"nodeType":"319","endLine":25,"endColumn":55},{"ruleId":"301","severity":1,"message":"302","line":49,"column":44,"nodeType":"303","messageId":"304","endLine":49,"endColumn":46},{"ruleId":"301","severity":1,"message":"302","line":51,"column":42,"nodeType":"303","messageId":"304","endLine":51,"endColumn":44},{"ruleId":"268","severity":1,"message":"322","line":61,"column":8,"nodeType":"270","endLine":61,"endColumn":25,"suggestions":"323"},{"ruleId":"276","severity":1,"message":"324","line":5,"column":10,"nodeType":"278","messageId":"279","endLine":5,"endColumn":14},{"ruleId":"276","severity":1,"message":"325","line":11,"column":8,"nodeType":"278","messageId":"279","endLine":11,"endColumn":13},{"ruleId":"276","severity":1,"message":"326","line":17,"column":28,"nodeType":"278","messageId":"279","endLine":17,"endColumn":41},{"ruleId":"276","severity":1,"message":"327","line":17,"column":43,"nodeType":"278","messageId":"279","endLine":17,"endColumn":59},{"ruleId":"268","severity":1,"message":"283","line":22,"column":8,"nodeType":"270","endLine":22,"endColumn":10,"suggestions":"328"},{"ruleId":"268","severity":1,"message":"283","line":16,"column":8,"nodeType":"270","endLine":16,"endColumn":10,"suggestions":"329"},{"ruleId":"276","severity":1,"message":"312","line":14,"column":13,"nodeType":"278","messageId":"279","endLine":14,"endColumn":26},{"ruleId":"276","severity":1,"message":"330","line":14,"column":199,"nodeType":"278","messageId":"279","endLine":14,"endColumn":217},{"ruleId":"268","severity":1,"message":"331","line":37,"column":8,"nodeType":"270","endLine":37,"endColumn":14,"suggestions":"332"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array.","ArrayExpression",["333"],"no-native-reassign",["334"],"no-negated-in-lhs",["335"],"no-unused-vars","'NewSessionForm' is defined but never used.","Identifier","unusedVar","'UserIcon' is defined but never used.","'LogIconHeader' is defined but never used.","'activePage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setActivePage'. Either include it or remove the dependency array.",["336"],"'isRecording' is assigned a value but never used.",["337"],"'LogIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'firebase'. Either include it or remove the dependency array.",["338"],["334"],["335"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'click2Sample' is defined but never used.","'setPolyrhythmMode' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'setTempo'. Either include it or remove the dependency array.",["339"],"React Hook useEffect has missing dependencies: 'playClick' and 'playing'. Either include them or remove the dependency array.",["340"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setActivePage' is assigned a value but never used.",["341"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'changeState(s => ...)' if you only need 'state' in the 'changeState' call.",["342"],"Assignments to the 'userId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'storage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'listRef' is assigned a value but never used.","Assignments to the 'listRef' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'myRecordingsMetadata' and 'myRecordingsURL'. Either include them or remove the dependency array.",["343"],"'Logo' is defined but never used.","'image' is defined but never used.","'activeSession' is assigned a value but never used.","'setActiveSession' is assigned a value but never used.",["344"],["345"],"'recordTimerRunning' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'audioRef' and 'userId'. Either include them or remove the dependency array.",["346"],{"desc":"347","fix":"348"},"no-global-assign","no-unsafe-negation",{"desc":"349","fix":"350"},{"desc":"349","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"349","fix":"364"},{"desc":"349","fix":"365"},{"desc":"366","fix":"367"},"Update the dependencies array to be: [setUser]",{"range":"368","text":"369"},"Update the dependencies array to be: [setActivePage]",{"range":"370","text":"371"},{"range":"372","text":"371"},"Update the dependencies array to be: [user, setLogs, firebase]",{"range":"373","text":"374"},"Update the dependencies array to be: [setTempo, taps]",{"range":"375","text":"376"},"Update the dependencies array to be: [accent, timeSig, tempo, polyrhythm, polyrhythmMode, playing, playClick]",{"range":"377","text":"378"},"Update the dependencies array to be: [firebase, user]",{"range":"379","text":"380"},"Update the dependencies array to be: [state]",{"range":"381","text":"382"},"Update the dependencies array to be: [loadingComplete, myRecordingsMetadata, myRecordingsURL]",{"range":"383","text":"384"},{"range":"385","text":"371"},{"range":"386","text":"371"},"Update the dependencies array to be: [audioRef, user, userId]",{"range":"387","text":"388"},[551,553],"[setUser]",[331,333],"[setActivePage]",[365,367],[1962,1977],"[user, setLogs, firebase]",[1797,1803],"[setTempo, taps]",[4868,4920],"[accent, timeSig, tempo, polyrhythm, polyrhythmMode, playing, playClick]",[3718,3724],"[firebase, user]",[830,832],"[state]",[2027,2044],"[loadingComplete, myRecordingsMetadata, myRecordingsURL]",[681,683],[466,468],[1355,1361],"[audioRef, user, userId]"]